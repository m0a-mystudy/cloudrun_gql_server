package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"strconv"

	"github.com/golang-jwt/jwt"
	"github.com/m0a/cloudrun_gql_server/auth"
	"github.com/m0a/cloudrun_gql_server/graph/model"
	"github.com/m0a/cloudrun_gql_server/models"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"golang.org/x/crypto/bcrypt"
	"golang.org/x/exp/slog"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, email string, password string, username *string) (*model.AuthPayload, error) {
	// パスワードをハッシュ化
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %v", err)
	}

	// ユーザー情報をデータベースに保存（sqlboilerを使用）
	newUser := &models.User{
		Email:        email,
		PasswordHash: string(hashedPassword),
		Username:     null.StringFromPtr(username), // sqlboilerのnullパッケージを使用
	}

	err = newUser.Insert(ctx, r.DB, boil.Infer())
	if err != nil {
		return nil, fmt.Errorf("failed to insert new user: %v", err)
	}

	// JWTトークンを生成（この部分はプロジェクトによって異なる）
	token, err := auth.GenerateJWTToken(newUser)
	if err != nil {
		return nil, fmt.Errorf("failed to generate JWT token: %v", err)
	}

	return &model.AuthPayload{
		Token: token,
		User: &model.User{
			ID:       strconv.FormatInt(newUser.ID.Int64, 10),
			Email:    email,
			Username: username,
		},
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	// 1. データベースからユーザーを検索
	user, err := models.Users(models.UserWhere.Email.EQ(email)).One(ctx, r.DB)
	if err != nil {
		return nil, fmt.Errorf("could not find user: %v", err)
	}

	// 2. ハッシュ化されたパスワードと入力されたパスワードを比較
	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(password))
	if err != nil {
		return nil, fmt.Errorf("incorrect password: %v", err)
	}

	// 3. JWTトークンを生成
	token, err := auth.GenerateJWTToken(user)
	if err != nil {
		return nil, fmt.Errorf("failed to generate JWT token: %v", err)
	}

	return &model.AuthPayload{
		Token: token,
		User: &model.User{
			ID:       strconv.FormatInt(user.ID.Int64, 10),
			Email:    email,
			Username: &user.Username.String,
		},
	}, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, oldPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	tokenString, ok := ctx.Value("token").(string)
	if !ok || tokenString == "" {
		return nil, fmt.Errorf("unauthenticated")
	}

	// JWTトークンをデコード
	claims := &jwt.StandardClaims{}
	_, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return []byte("my-secret-key"), nil // 秘密鍵を指定
	})
	if err != nil {
		return nil, fmt.Errorf("invalid token: %v", err)
	}

	r.Logger.Info("claims", slog.Any("claims", claims))

	// デコードしたclaimsからユーザーIDを取得
	userID, err := strconv.ParseInt(claims.Subject, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid user id: %v", err)
	}

	// ユーザーIDを使用してデータベースからユーザー情報を取得
	user, err := models.Users(models.UserWhere.ID.EQ(null.Int64From(userID))).One(ctx, r.DB)
	if err != nil {
		return nil, fmt.Errorf("could not find user: %v", err)
	}

	return &model.User{
		ID:       strconv.FormatInt(user.ID.Int64, 10),
		Email:    user.Email,
		Username: &user.Username.String,
	}, nil
}
